{"version":3,"file":"static/js/785.2f601600.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const renderItems = arr => {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n    // TransitionGroup работать не будет за счет постоянного пересоздания компонента\n    // разбор в следующем уроке\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                disabled={newItemLoading}\n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n        <div className=\"char__search-wrapper\">\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                <div className=\"inner\">To page</div>\n            </Link>\n        </div> :\n        <div className=\"char__search-error\">\n            The character was not found. Check the name and try again\n        </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field\n                            id=\"charName\"\n                            name='charName'\n                            type='text'\n                            placeholder=\"Enter name\"/>\n                        <button\n                            type='submit'\n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const { request, clearError, process, setProcess } = useHttp();\n\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n    // ЗДЕСЬ БУДЕТ ВАШ КЛЮЧ, ЭТОТ КЛЮЧ МОЖЕТ НЕ РАБОТАТЬ\n    const _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    // Вариант модификации готового метода для поиска по имени.\n    // Вызывать его можно вот так: getAllCharacters(null, name)\n\n    // const getAllCharacters = async (offset = _baseOffset, name = '') => {\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n    //     return res.data.results.map(_transformCharacter);\n    // }\n\n    // Или можно создать отдельный метод для поиска по имени\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description\n                ? `${char.description.slice(0, 210)}...`\n                : \"There is no description for this character\",\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        };\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} p.`\n                : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices[0].price\n                ? `${comics.prices[0].price}$`\n                : \"not available\",\n        };\n    };\n\n    return {\n        clearError,\n        process,\n        setProcess,\n        getAllCharacters,\n        getCharacterByName,\n        getCharacter,\n        getAllComics,\n        getComic,\n    };\n};\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCharList","ended","wrap","_context","prev","next","length","concat","_toConsumableArray","stop","_x","apply","arguments","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","charId","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","console","log","this","setState","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","url","method","body","headers","response","_args","undefined","fetch","sent","ok","status","json","abrupt","t0","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}