{"version":3,"file":"static/js/425.aaaed2b6.chunk.js","mappings":"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","sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button\n                disabled={newItemLoading}\n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\n\nimport ComicsList from \"../comicsList/ComicsList\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics page</title>\n            </Helmet>\n            <AppBanner/>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage;"],"names":["setContent","process","Component","newItemLoading","_jsx","Spinner","ErrorMessage","Error","_useState","useState","_useState2","_slicedToArray","comicsList","setComicsList","_useState3","_useState4","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","comicsEnded","setComicsEnded","_useMarvelService","useMarvelService","getAllComics","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","concat","_toConsumableArray","_jsxs","className","children","arr","items","map","item","i","Link","to","id","src","thumbnail","alt","title","price","renderItems","disabled","style","onClick","_Fragment","Helmet","name","content","AppBanner","ComicsList"],"sourceRoot":""}